===== TERMINALS =====
[0]star [1]plus [2]colon [3]question [4]$ 
[5]dash [6]lparen [7]not [8]bar [9]rbrack 
[10]wildcard [11]rparen [12]lbrack [13]escaped [14]character 
[15]empty 
===== NONTERMINALS =====
[0]Regex_R [1]Regex_DR [2]Regex_RG [3]Regex_UG [4]^ 
[5]Regex_CHAR [6]Regex_G [7]Regex_RR [8]Regex_UR 
===== PRODUCTIONS =====
[0]Regex_R ::= Regex_DR [1]Regex_R ::= Regex_DR bar Regex_R [2]Regex_DR ::= Regex_UR question Regex_RR [3]Regex_DR ::= Regex_UR star Regex_RR [4]Regex_DR ::= Regex_UR plus Regex_RR 
[5]Regex_DR ::= Regex_UR Regex_RR [6]Regex_RG ::= Regex_G [7]Regex_RG ::= [8]Regex_UG ::= Regex_CHAR dash Regex_CHAR [9]Regex_UG ::= Regex_CHAR 
[10]^ ::= Regex_R $ [11]Regex_CHAR ::= character [12]Regex_CHAR ::= escaped [13]Regex_G ::= Regex_UG Regex_RG [14]Regex_RR ::= Regex_DR 
[15]Regex_RR ::= [16]Regex_UR ::= lparen Regex_R rparen [17]Regex_UR ::= lbrack not Regex_G rbrack [18]Regex_UR ::= Regex_CHAR [19]Regex_UR ::= wildcard 
[20]Regex_UR ::= lbrack Regex_G rbrack 
===== LEXICAL PRECEDENCE GRAPH =====
Vertices: [
  [0: star,
   1: plus,
   2: colon,
   3: question,
   4: dash,
   5: lparen,
   6: not,
   7: bar,
   8: rbrack,
   9: wildcard,
   10: rparen,
   11: lbrack,
   12: escaped,
   13: character,
   14: empty]];
Adjacency matrix: 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
===== DISAMBIGUATION FUNCTIONS/GROUPS =====
===== LALR(1) DFA =====
-------------------
lalr_state [0]: {
    [Regex_DR ::= (*) Regex_UR Regex_RR, {$ bar }]
    [Regex_R ::= (*) Regex_DR bar Regex_R, {$ }]
    [Regex_UR ::= (*) lbrack Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard lbrack }]
    [Regex_UR ::= (*) wildcard, {star escaped plus question $ character lparen bar wildcard lbrack }]
    [Regex_UR ::= (*) lparen Regex_R rparen, {star escaped plus question $ character lparen bar wildcard lbrack }]
    [Regex_UR ::= (*) Regex_CHAR, {star escaped plus question $ character lparen bar wildcard lbrack }]
    [^ ::= (*) Regex_R $, {}]
    [Regex_R ::= (*) Regex_DR, {$ }]
    [Regex_DR ::= (*) Regex_UR question Regex_RR, {$ bar }]
    [Regex_DR ::= (*) Regex_UR plus Regex_RR, {$ bar }]
    [Regex_CHAR ::= (*) escaped, {star escaped plus question character $ lparen bar wildcard lbrack }]
    [Regex_UR ::= (*) lbrack not Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard lbrack }]
    [Regex_DR ::= (*) Regex_UR star Regex_RR, {$ bar }]
    [Regex_CHAR ::= (*) character, {star escaped plus question character $ lparen bar wildcard lbrack }]
}
transition on character to state 9
transition on Regex_CHAR to state 6
transition on Regex_R to state 7
transition on escaped to state 8
transition on lbrack to state 3
transition on Regex_DR to state 2
transition on Regex_UR to state 1
transition on wildcard to state 4
transition on lparen to state 5
-------------------
lalr_state [1]: {
    [Regex_DR ::= (*) Regex_UR Regex_RR, {$ bar rparen }]
    [Regex_DR ::= Regex_UR (*) Regex_RR, {$ bar rparen }]
    [Regex_UR ::= (*) lbrack Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) wildcard, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lparen Regex_R rparen, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) Regex_CHAR, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= Regex_UR (*) question Regex_RR, {$ bar rparen }]
    [Regex_RR ::= (*) Regex_DR, {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR question Regex_RR, {$ bar rparen }]
    [Regex_RR ::= (*), {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR plus Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) escaped, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lbrack not Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= Regex_UR (*) plus Regex_RR, {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR star Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) character, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= Regex_UR (*) star Regex_RR, {$ bar rparen }]
}
transition on lparen to state 5
transition on Regex_RR to state 15
transition on star to state 19
transition on character to state 9
transition on Regex_DR to state 17
transition on escaped to state 8
transition on lbrack to state 3
transition on plus to state 18
transition on Regex_UR to state 1
transition on Regex_CHAR to state 6
transition on wildcard to state 4
transition on question to state 16
-------------------
lalr_state [2]: {
    [Regex_R ::= Regex_DR (*) bar Regex_R, {$ rparen }]
    [Regex_R ::= Regex_DR (*), {$ rparen }]
}
transition on bar to state 10
-------------------
lalr_state [3]: {
    [Regex_G ::= (*) Regex_UG Regex_RG, {rbrack }]
    [Regex_UR ::= lbrack (*) Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UG ::= (*) Regex_CHAR dash Regex_CHAR, {escaped character rbrack }]
    [Regex_UG ::= (*) Regex_CHAR, {escaped character rbrack }]
    [Regex_CHAR ::= (*) escaped, {escaped dash character rbrack }]
    [Regex_UR ::= lbrack (*) not Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_CHAR ::= (*) character, {escaped dash character rbrack }]
}
transition on Regex_CHAR to state 13
transition on Regex_G to state 12
transition on not to state 14
transition on escaped to state 8
transition on Regex_UG to state 11
transition on character to state 9
-------------------
lalr_state [4]: {
    [Regex_UR ::= wildcard (*), {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
}
-------------------
lalr_state [5]: {
    [Regex_DR ::= (*) Regex_UR Regex_RR, {bar rparen }]
    [Regex_R ::= (*) Regex_DR bar Regex_R, {rparen }]
    [Regex_UR ::= (*) lbrack Regex_G rbrack, {star escaped plus question character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= lparen (*) Regex_R rparen, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) wildcard, {star escaped plus question character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lparen Regex_R rparen, {star escaped plus question character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) Regex_CHAR, {star escaped plus question character lparen bar wildcard rparen lbrack }]
    [Regex_R ::= (*) Regex_DR, {rparen }]
    [Regex_DR ::= (*) Regex_UR question Regex_RR, {bar rparen }]
    [Regex_DR ::= (*) Regex_UR plus Regex_RR, {bar rparen }]
    [Regex_CHAR ::= (*) escaped, {star escaped plus question character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lbrack not Regex_G rbrack, {star escaped plus question character lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= (*) Regex_UR star Regex_RR, {bar rparen }]
    [Regex_CHAR ::= (*) character, {star escaped plus question character lparen bar wildcard rparen lbrack }]
}
transition on Regex_DR to state 2
transition on Regex_CHAR to state 6
transition on lbrack to state 3
transition on Regex_UR to state 1
transition on character to state 9
transition on wildcard to state 4
transition on Regex_R to state 20
transition on escaped to state 8
transition on lparen to state 5
-------------------
lalr_state [6]: {
    [Regex_UR ::= Regex_CHAR (*), {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
}
-------------------
lalr_state [7]: {
    [^ ::= Regex_R (*) $, {}]
}
-------------------
lalr_state [8]: {
    [Regex_CHAR ::= escaped (*), {star plus question $ dash lparen bar rbrack wildcard rparen lbrack escaped character }]
}
-------------------
lalr_state [9]: {
    [Regex_CHAR ::= character (*), {star plus question $ dash lparen bar rbrack wildcard rparen lbrack escaped character }]
}
-------------------
lalr_state [10]: {
    [Regex_DR ::= (*) Regex_UR Regex_RR, {$ bar rparen }]
    [Regex_R ::= (*) Regex_DR bar Regex_R, {$ rparen }]
    [Regex_UR ::= (*) lbrack Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_R ::= Regex_DR bar (*) Regex_R, {$ rparen }]
    [Regex_UR ::= (*) wildcard, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lparen Regex_R rparen, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) Regex_CHAR, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_R ::= (*) Regex_DR, {$ rparen }]
    [Regex_DR ::= (*) Regex_UR question Regex_RR, {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR plus Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) escaped, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lbrack not Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= (*) Regex_UR star Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) character, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
}
transition on Regex_UR to state 1
transition on escaped to state 8
transition on Regex_CHAR to state 6
transition on lbrack to state 3
transition on Regex_R to state 22
transition on character to state 9
transition on Regex_DR to state 2
transition on wildcard to state 4
transition on lparen to state 5
-------------------
lalr_state [11]: {
    [Regex_G ::= (*) Regex_UG Regex_RG, {rbrack }]
    [Regex_UG ::= (*) Regex_CHAR dash Regex_CHAR, {escaped character rbrack }]
    [Regex_RG ::= (*) Regex_G, {rbrack }]
    [Regex_UG ::= (*) Regex_CHAR, {escaped character rbrack }]
    [Regex_CHAR ::= (*) escaped, {escaped dash character rbrack }]
    [Regex_RG ::= (*), {rbrack }]
    [Regex_G ::= Regex_UG (*) Regex_RG, {rbrack }]
    [Regex_CHAR ::= (*) character, {escaped dash character rbrack }]
}
transition on Regex_UG to state 11
transition on escaped to state 8
transition on Regex_CHAR to state 13
transition on character to state 9
transition on Regex_RG to state 26
transition on Regex_G to state 25
-------------------
lalr_state [12]: {
    [Regex_UR ::= lbrack Regex_G (*) rbrack, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
}
transition on rbrack to state 21
-------------------
lalr_state [13]: {
    [Regex_UG ::= Regex_CHAR (*) dash Regex_CHAR, {escaped character rbrack }]
    [Regex_UG ::= Regex_CHAR (*), {escaped character rbrack }]
}
transition on dash to state 23
-------------------
lalr_state [14]: {
    [Regex_G ::= (*) Regex_UG Regex_RG, {rbrack }]
    [Regex_UG ::= (*) Regex_CHAR dash Regex_CHAR, {escaped character rbrack }]
    [Regex_UG ::= (*) Regex_CHAR, {escaped character rbrack }]
    [Regex_CHAR ::= (*) escaped, {escaped dash character rbrack }]
    [Regex_CHAR ::= (*) character, {escaped dash character rbrack }]
    [Regex_UR ::= lbrack not (*) Regex_G rbrack, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
}
transition on character to state 9
transition on escaped to state 8
transition on Regex_UG to state 11
transition on Regex_G to state 29
transition on Regex_CHAR to state 13
-------------------
lalr_state [15]: {
    [Regex_DR ::= Regex_UR Regex_RR (*), {$ bar rparen }]
}
-------------------
lalr_state [16]: {
    [Regex_DR ::= (*) Regex_UR Regex_RR, {$ bar rparen }]
    [Regex_UR ::= (*) lbrack Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) wildcard, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lparen Regex_R rparen, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) Regex_CHAR, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= Regex_UR question (*) Regex_RR, {$ bar rparen }]
    [Regex_RR ::= (*) Regex_DR, {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR question Regex_RR, {$ bar rparen }]
    [Regex_RR ::= (*), {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR plus Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) escaped, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lbrack not Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= (*) Regex_UR star Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) character, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
}
transition on lparen to state 5
transition on lbrack to state 3
transition on character to state 9
transition on Regex_RR to state 28
transition on Regex_CHAR to state 6
transition on Regex_DR to state 17
transition on wildcard to state 4
transition on escaped to state 8
transition on Regex_UR to state 1
-------------------
lalr_state [17]: {
    [Regex_RR ::= Regex_DR (*), {$ bar rparen }]
}
-------------------
lalr_state [18]: {
    [Regex_DR ::= (*) Regex_UR Regex_RR, {$ bar rparen }]
    [Regex_UR ::= (*) lbrack Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) wildcard, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lparen Regex_R rparen, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) Regex_CHAR, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_RR ::= (*) Regex_DR, {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR question Regex_RR, {$ bar rparen }]
    [Regex_RR ::= (*), {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR plus Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) escaped, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= Regex_UR plus (*) Regex_RR, {$ bar rparen }]
    [Regex_UR ::= (*) lbrack not Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= (*) Regex_UR star Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) character, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
}
transition on lparen to state 5
transition on escaped to state 8
transition on Regex_UR to state 1
transition on Regex_CHAR to state 6
transition on wildcard to state 4
transition on character to state 9
transition on Regex_RR to state 24
transition on lbrack to state 3
transition on Regex_DR to state 17
-------------------
lalr_state [19]: {
    [Regex_DR ::= (*) Regex_UR Regex_RR, {$ bar rparen }]
    [Regex_UR ::= (*) lbrack Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) wildcard, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lparen Regex_R rparen, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) Regex_CHAR, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_RR ::= (*) Regex_DR, {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR question Regex_RR, {$ bar rparen }]
    [Regex_DR ::= Regex_UR star (*) Regex_RR, {$ bar rparen }]
    [Regex_RR ::= (*), {$ bar rparen }]
    [Regex_DR ::= (*) Regex_UR plus Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) escaped, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
    [Regex_UR ::= (*) lbrack not Regex_G rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
    [Regex_DR ::= (*) Regex_UR star Regex_RR, {$ bar rparen }]
    [Regex_CHAR ::= (*) character, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
}
transition on lparen to state 5
transition on Regex_DR to state 17
transition on Regex_CHAR to state 6
transition on lbrack to state 3
transition on wildcard to state 4
transition on escaped to state 8
transition on character to state 9
transition on Regex_RR to state 30
transition on Regex_UR to state 1
-------------------
lalr_state [20]: {
    [Regex_UR ::= lparen Regex_R (*) rparen, {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
}
transition on rparen to state 27
-------------------
lalr_state [21]: {
    [Regex_UR ::= lbrack Regex_G rbrack (*), {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
}
-------------------
lalr_state [22]: {
    [Regex_R ::= Regex_DR bar Regex_R (*), {$ rparen }]
}
-------------------
lalr_state [23]: {
    [Regex_UG ::= Regex_CHAR dash (*) Regex_CHAR, {escaped character rbrack }]
    [Regex_CHAR ::= (*) escaped, {escaped character rbrack }]
    [Regex_CHAR ::= (*) character, {escaped character rbrack }]
}
transition on Regex_CHAR to state 31
transition on escaped to state 8
transition on character to state 9
-------------------
lalr_state [24]: {
    [Regex_DR ::= Regex_UR plus Regex_RR (*), {$ bar rparen }]
}
-------------------
lalr_state [25]: {
    [Regex_RG ::= Regex_G (*), {rbrack }]
}
-------------------
lalr_state [26]: {
    [Regex_G ::= Regex_UG Regex_RG (*), {rbrack }]
}
-------------------
lalr_state [27]: {
    [Regex_UR ::= lparen Regex_R rparen (*), {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
}
-------------------
lalr_state [28]: {
    [Regex_DR ::= Regex_UR question Regex_RR (*), {$ bar rparen }]
}
-------------------
lalr_state [29]: {
    [Regex_UR ::= lbrack not Regex_G (*) rbrack, {star escaped plus question $ character lparen bar wildcard rparen lbrack }]
}
transition on rbrack to state 32
-------------------
lalr_state [30]: {
    [Regex_DR ::= Regex_UR star Regex_RR (*), {$ bar rparen }]
}
-------------------
lalr_state [31]: {
    [Regex_UG ::= Regex_CHAR dash Regex_CHAR (*), {escaped character rbrack }]
}
-------------------
lalr_state [32]: {
    [Regex_UR ::= lbrack not Regex_G rbrack (*), {star escaped plus question character $ lparen bar wildcard rparen lbrack }]
}
===== PARSE TABLE =====
From state #0
 [layout term 15 -> terms 13,14,6,10,12]
 [term 6:SHIFT(to state 5)] [term 14:SHIFT(to state 9)]
 [term 13:SHIFT(to state 8)] [term 10:SHIFT(to state 4)]
 [term 12:SHIFT(to state 3)]
From state #1
 [layout term 15 -> terms 4]
 [layout term null -> terms 0,13,1,3,14,6,8,10,11,12]
 [term 12:SHIFT(to state 3)] [term 6:SHIFT(to state 5)]
 [term 8:REDUCE(with prod 15)] [term 3:SHIFT(to state 16)]
 [term 0:SHIFT(to state 19)] [term 1:SHIFT(to state 18)]
 [term 4:REDUCE(with prod 15)] [term 14:SHIFT(to state 9)]
 [term 13:SHIFT(to state 8)] [term 11:REDUCE(with prod 15)]
 [term 10:SHIFT(to state 4)]
From state #2
 [layout term 15 -> terms 4]
 [layout term null -> terms 8,11]
 [term 4:REDUCE(with prod 0)] [term 8:SHIFT(to state 10)]
 [term 11:REDUCE(with prod 0)]
From state #3
 [layout term null -> terms 13,14,7]
 [term 7:SHIFT(to state 14)] [term 14:SHIFT(to state 9)]
 [term 13:SHIFT(to state 8)]
From state #4
 [layout term 15 -> terms 4]
 [layout term null -> terms 0,13,1,3,14,6,8,10,11,12]
 [term 12:REDUCE(with prod 19)] [term 6:REDUCE(with prod 19)]
 [term 8:REDUCE(with prod 19)] [term 3:REDUCE(with prod 19)]
 [term 0:REDUCE(with prod 19)] [term 1:REDUCE(with prod 19)]
 [term 4:REDUCE(with prod 19)] [term 14:REDUCE(with prod 19)]
 [term 13:REDUCE(with prod 19)] [term 11:REDUCE(with prod 19)]
 [term 10:REDUCE(with prod 19)]
From state #5
 [layout term null -> terms 13,14,6,10,12]
 [term 6:SHIFT(to state 5)] [term 14:SHIFT(to state 9)]
 [term 13:SHIFT(to state 8)] [term 10:SHIFT(to state 4)]
 [term 12:SHIFT(to state 3)]
From state #6
 [layout term 15 -> terms 4]
 [layout term null -> terms 0,13,1,3,14,6,8,10,11,12]
 [term 12:REDUCE(with prod 18)] [term 6:REDUCE(with prod 18)]
 [term 8:REDUCE(with prod 18)] [term 3:REDUCE(with prod 18)]
 [term 0:REDUCE(with prod 18)] [term 1:REDUCE(with prod 18)]
 [term 4:REDUCE(with prod 18)] [term 14:REDUCE(with prod 18)]
 [term 13:REDUCE(with prod 18)] [term 11:REDUCE(with prod 18)]
 [term 10:REDUCE(with prod 18)]
From state #7
 [layout term 15 -> terms 4]
 [term 4:ACCEPT]
From state #8
 [layout term 15 -> terms 4]
 [layout term null -> terms 0,13,1,3,14,5,6,8,9,10,11,12]
 [term 12:REDUCE(with prod 12)] [term 6:REDUCE(with prod 12)]
 [term 9:REDUCE(with prod 12)] [term 8:REDUCE(with prod 12)]
 [term 3:REDUCE(with prod 12)] [term 5:REDUCE(with prod 12)]
 [term 0:REDUCE(with prod 12)] [term 1:REDUCE(with prod 12)]
 [term 4:REDUCE(with prod 12)] [term 14:REDUCE(with prod 12)]
 [term 13:REDUCE(with prod 12)] [term 11:REDUCE(with prod 12)]
 [term 10:REDUCE(with prod 12)]
From state #9
 [layout term 15 -> terms 4]
 [layout term null -> terms 0,13,1,3,14,5,6,8,9,10,11,12]
 [term 12:REDUCE(with prod 11)] [term 6:REDUCE(with prod 11)]
 [term 9:REDUCE(with prod 11)] [term 8:REDUCE(with prod 11)]
 [term 3:REDUCE(with prod 11)] [term 5:REDUCE(with prod 11)]
 [term 0:REDUCE(with prod 11)] [term 1:REDUCE(with prod 11)]
 [term 4:REDUCE(with prod 11)] [term 14:REDUCE(with prod 11)]
 [term 13:REDUCE(with prod 11)] [term 11:REDUCE(with prod 11)]
 [term 10:REDUCE(with prod 11)]
From state #10
 [layout term null -> terms 13,14,6,10,12]
 [term 6:SHIFT(to state 5)] [term 14:SHIFT(to state 9)]
 [term 13:SHIFT(to state 8)] [term 10:SHIFT(to state 4)]
 [term 12:SHIFT(to state 3)]
From state #11
 [layout term null -> terms 13,14,9]
 [term 9:REDUCE(with prod 7)] [term 14:SHIFT(to state 9)]
 [term 13:SHIFT(to state 8)]
From state #12
 [layout term null -> terms 9]
 [term 9:SHIFT(to state 21)]
From state #13
 [layout term null -> terms 13,14,5,9]
 [term 9:REDUCE(with prod 9)] [term 14:REDUCE(with prod 9)]
 [term 13:REDUCE(with prod 9)] [term 5:SHIFT(to state 23)]
From state #14
 [layout term null -> terms 13,14]
 [term 14:SHIFT(to state 9)] [term 13:SHIFT(to state 8)]
From state #15
 [layout term 15 -> terms 4]
 [layout term null -> terms 8,11]
 [term 8:REDUCE(with prod 5)] [term 4:REDUCE(with prod 5)]
 [term 11:REDUCE(with prod 5)]
From state #16
 [layout term 15 -> terms 4]
 [layout term null -> terms 13,14,6,8,10,11,12]
 [term 6:SHIFT(to state 5)] [term 14:SHIFT(to state 9)]
 [term 8:REDUCE(with prod 15)] [term 4:REDUCE(with prod 15)]
 [term 13:SHIFT(to state 8)] [term 11:REDUCE(with prod 15)]
 [term 10:SHIFT(to state 4)] [term 12:SHIFT(to state 3)]
From state #17
 [layout term 15 -> terms 4]
 [layout term null -> terms 8,11]
 [term 8:REDUCE(with prod 14)] [term 4:REDUCE(with prod 14)]
 [term 11:REDUCE(with prod 14)]
From state #18
 [layout term 15 -> terms 4]
 [layout term null -> terms 13,14,6,8,10,11,12]
 [term 6:SHIFT(to state 5)] [term 14:SHIFT(to state 9)]
 [term 8:REDUCE(with prod 15)] [term 4:REDUCE(with prod 15)]
 [term 13:SHIFT(to state 8)] [term 11:REDUCE(with prod 15)]
 [term 10:SHIFT(to state 4)] [term 12:SHIFT(to state 3)]
From state #19
 [layout term 15 -> terms 4]
 [layout term null -> terms 13,14,6,8,10,11,12]
 [term 6:SHIFT(to state 5)] [term 14:SHIFT(to state 9)]
 [term 8:REDUCE(with prod 15)] [term 4:REDUCE(with prod 15)]
 [term 13:SHIFT(to state 8)] [term 11:REDUCE(with prod 15)]
 [term 10:SHIFT(to state 4)] [term 12:SHIFT(to state 3)]
From state #20
 [layout term null -> terms 11]
 [term 11:SHIFT(to state 27)]
From state #21
 [layout term 15 -> terms 4]
 [layout term null -> terms 0,13,1,3,14,6,8,10,11,12]
 [term 12:REDUCE(with prod 20)] [term 6:REDUCE(with prod 20)]
 [term 8:REDUCE(with prod 20)] [term 3:REDUCE(with prod 20)]
 [term 0:REDUCE(with prod 20)] [term 1:REDUCE(with prod 20)]
 [term 4:REDUCE(with prod 20)] [term 14:REDUCE(with prod 20)]
 [term 13:REDUCE(with prod 20)] [term 11:REDUCE(with prod 20)]
 [term 10:REDUCE(with prod 20)]
From state #22
 [layout term 15 -> terms 4]
 [layout term null -> terms 11]
 [term 4:REDUCE(with prod 1)] [term 11:REDUCE(with prod 1)]
From state #23
 [layout term null -> terms 13,14]
 [term 14:SHIFT(to state 9)] [term 13:SHIFT(to state 8)]
From state #24
 [layout term 15 -> terms 4]
 [layout term null -> terms 8,11]
 [term 8:REDUCE(with prod 4)] [term 4:REDUCE(with prod 4)]
 [term 11:REDUCE(with prod 4)]
From state #25
 [layout term null -> terms 9]
 [term 9:REDUCE(with prod 6)]
From state #26
 [layout term null -> terms 9]
 [term 9:REDUCE(with prod 13)]
From state #27
 [layout term 15 -> terms 4]
 [layout term null -> terms 0,13,1,3,14,6,8,10,11,12]
 [term 12:REDUCE(with prod 16)] [term 6:REDUCE(with prod 16)]
 [term 8:REDUCE(with prod 16)] [term 3:REDUCE(with prod 16)]
 [term 0:REDUCE(with prod 16)] [term 1:REDUCE(with prod 16)]
 [term 4:REDUCE(with prod 16)] [term 14:REDUCE(with prod 16)]
 [term 13:REDUCE(with prod 16)] [term 11:REDUCE(with prod 16)]
 [term 10:REDUCE(with prod 16)]
From state #28
 [layout term 15 -> terms 4]
 [layout term null -> terms 8,11]
 [term 8:REDUCE(with prod 2)] [term 4:REDUCE(with prod 2)]
 [term 11:REDUCE(with prod 2)]
From state #29
 [layout term null -> terms 9]
 [term 9:SHIFT(to state 32)]
From state #30
 [layout term 15 -> terms 4]
 [layout term null -> terms 8,11]
 [term 8:REDUCE(with prod 3)] [term 4:REDUCE(with prod 3)]
 [term 11:REDUCE(with prod 3)]
From state #31
 [layout term null -> terms 13,14,9]
 [term 9:REDUCE(with prod 8)] [term 14:REDUCE(with prod 8)]
 [term 13:REDUCE(with prod 8)]
From state #32
 [layout term 15 -> terms 4]
 [layout term null -> terms 0,13,1,3,14,6,8,10,11,12]
 [term 12:REDUCE(with prod 17)] [term 6:REDUCE(with prod 17)]
 [term 8:REDUCE(with prod 17)] [term 3:REDUCE(with prod 17)]
 [term 0:REDUCE(with prod 17)] [term 1:REDUCE(with prod 17)]
 [term 4:REDUCE(with prod 17)] [term 14:REDUCE(with prod 17)]
 [term 13:REDUCE(with prod 17)] [term 11:REDUCE(with prod 17)]
 [term 10:REDUCE(with prod 17)]
===== GOTO TABLE =====
From state #0
 [nonterm 8->state 1] [nonterm 1->state 2] [nonterm 0->state 7]
 [nonterm 5->state 6]
From state #1
 [nonterm 8->state 1] [nonterm 1->state 17] [nonterm 7->state 15]
 [nonterm 5->state 6]
From state #2
From state #3
 [nonterm 3->state 11] [nonterm 6->state 12] [nonterm 5->state 13]
From state #4
From state #5
 [nonterm 8->state 1] [nonterm 1->state 2] [nonterm 0->state 20]
 [nonterm 5->state 6]
From state #6
From state #7
From state #8
From state #9
From state #10
 [nonterm 8->state 1] [nonterm 1->state 2] [nonterm 0->state 22]
 [nonterm 5->state 6]
From state #11
 [nonterm 2->state 26] [nonterm 3->state 11] [nonterm 6->state 25]
 [nonterm 5->state 13]
From state #12
From state #13
From state #14
 [nonterm 3->state 11] [nonterm 6->state 29] [nonterm 5->state 13]
From state #15
From state #16
 [nonterm 8->state 1] [nonterm 1->state 17] [nonterm 7->state 28]
 [nonterm 5->state 6]
From state #17
From state #18
 [nonterm 8->state 1] [nonterm 1->state 17] [nonterm 7->state 24]
 [nonterm 5->state 6]
From state #19
 [nonterm 8->state 1] [nonterm 1->state 17] [nonterm 7->state 30]
 [nonterm 5->state 6]
From state #20
From state #21
From state #22
From state #23
 [nonterm 5->state 31]
From state #24
From state #25
From state #26
From state #27
From state #28
From state #29
From state #30
From state #31
From state #32
